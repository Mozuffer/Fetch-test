---
- name: Create VPC
  ec2_vpc_net:
    name: "{{ vpc_name }}"
    cidr_block: "{{ vpc_cidr_block }}"
    region: "{{ aws_region }}"
    state: "present"
  register: fetchr_vpc

- name: Set VPC ID in variable
  set_fact:
    fetchr_vpc_id: "{{ fetchr_vpc.vpc.id }}"

- name: Create Public Subnet
  ec2_vpc_subnet:
    state: "present"
    vpc_id: "{{ fetchr_vpc_id }}"
    cidr: "{{ public_subnet_1_cidr }}"
    az: "{{ aws_region }}a"
    region: "{{ aws_region }}"
    resource_tags:
      Name: "Fetchr Public Subnet"
  register: fetchr_public_subnet

- name: Set Public Subnet ID in variable
  set_fact:
    fetchr_public_subnet_id: "{{ fetchr_public_subnet.subnet.id }}"

- name: Create Internet Gateway for VPC
  ec2_vpc_igw:
    vpc_id: "{{ fetchr_vpc_id }}"
    region: "{{ aws_region }}"
    state: "present"
  register: fetchr_vpc_igw

- name: Set Internet Gateway ID in variable
  set_fact:
    fetchr_igw_id: "{{ fetchr_vpc_igw}}"

- name: Set up public subnet route table
  ec2_vpc_route_table:
    state: "present"
    vpc_id: "{{ fetchr_vpc_id }}"
    region: "{{ aws_region }}"
    tags:
      Name: "Fetchr Public route"
    subnets:
      - "{{ fetchr_public_subnet_id }}"
    routes:
      - dest: "0.0.0.0/0"
        gateway_id: "{{ fetchr_igw_id.gateway_id }}"

- name: Create Main Security Group
  ec2_group:
    name: "Fetchr_Security_Group"
    description: "Fetchr main Security Group"
    vpc_id: "{{ fetchr_vpc_id }}"
    region: "{{ aws_region }}"
    rules:
      - proto: "tcp"
        from_port: "22"
        to_port: "22"
        cidr_ip: "{{ my_ip }}"
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0 

 name: Set Security group in variable
  set_fact:
    Fetchr_Security_Group_id: Fetchr_Security_Group

- name: create ec2 instance for django APP 
  ec2:
    region: "{{ aws_region }}"
    key_name: "{{ my_key }}"
    instance_type: t2.micro
    image: "{{ os_name }}"
    wait: yes
    wait_timeout: 500
    instance_tags:
      Name: djangoApp
    monitoring: no  
    group: Fetchr_Security_Group
    count: 1
    vpc_subnet_id: "{{ fetchr_public_subnet_id }}"
    assign_public_ip: yes
  register: ec2_out

- name: Register Django instances as fact 
  set_fact:
    fetchr_django_ec2_instances: "{{ ec2_out}}"

- name: print ec2_out instace 
  debug: 
    msg: "{{ ec2_out}}"

- name: wait for ssh to come up 
  wait_for: 
    host: "{{ item.public_dns_name }}"
    port: 22
    delay: 60
    timeout: 320
    state: started 
  with_items: "{{ ec2_out.instances }}" 

- name: add server ip addresses to hosts group
  add_host: 
    hostname: "{{ item.public_ip }}"
    groupname: webserver
  with_items: "{{ ec2_out.instances }}"
  
...
